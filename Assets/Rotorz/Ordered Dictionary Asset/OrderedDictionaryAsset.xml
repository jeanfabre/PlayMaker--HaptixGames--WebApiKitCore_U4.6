<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>OrderedDictionaryAsset</name>
  </assembly>
  <members>
    <member name="T:Rotorz.Extras.Collections.OrderedDictionaryAsset">
      <summary>
            Base class for a serializable ordered dictionary asset. Custom dictionary asset
            classes should inherit from the <see cref="T:Rotorz.Extras.Collections.OrderedDictionaryAsset`2" />
            generic class instead.
            </summary>
    </member>
    <member name="M:Rotorz.Extras.Collections.OrderedDictionaryAsset.#ctor(System.Type,System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:Rotorz.Extras.Collections.OrderedDictionaryAsset" /> class.
            </summary>
      <param name="keyType">Data type of a key.</param>
      <param name="valueType">Data type of a value.</param>
    </member>
    <member name="M:Rotorz.Extras.Collections.OrderedDictionaryAsset.ContainsKey(System.Object)">
      <summary>
            Determines whether the dictionary contains the untyped key.
            </summary>
      <param name="key">Key to lookup.</param>
      <returns>
            A value of <c>true</c> if dictionary contains an entry with the specified key.
            Always returns a value of <c>false</c> if the specified key is not of the type
            <see cref="P:Rotorz.Extras.Collections.OrderedDictionaryAsset.KeyType" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
            If <paramref name="key" /> is <c>null</c>.
            </exception>
    </member>
    <member name="P:Rotorz.Extras.Collections.OrderedDictionaryAsset.Count">
      <summary>
            Gets the total count of entries in the dictionary.
            </summary>
    </member>
    <member name="M:Rotorz.Extras.Collections.OrderedDictionaryAsset.GetKeyFromIndex(System.Int32)">
      <summary>
            Gets the key of the entry at the specified index.
            </summary>
      <param name="index">Zero-based index of entry in ordered dictionary.</param>
      <returns>
            The key.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
            If <paramref name="index" /> is out of range.
            </exception>
    </member>
    <member name="M:Rotorz.Extras.Collections.OrderedDictionaryAsset.GetKeyFromIndexInternal(System.Int32)">
      <summary>
            Implements the public interface <see cref="M:Rotorz.Extras.Collections.OrderedDictionaryAsset.GetKeyFromIndex(System.Int32)" />.
            </summary>
      <param name="index">Zero-based index of entry in ordered dictionary.</param>
      <returns>
            The key.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
            If <paramref name="index" /> is out of range.
            </exception>
    </member>
    <member name="M:Rotorz.Extras.Collections.OrderedDictionaryAsset.GetValueFromIndex(System.Int32)">
      <summary>
            Gets the value of the entry at the specified index.
            </summary>
      <param name="index">Zero-based index of entry in ordered dictionary.</param>
      <returns>
            The key.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
            If <paramref name="index" /> is out of range.
            </exception>
    </member>
    <member name="M:Rotorz.Extras.Collections.OrderedDictionaryAsset.GetValueFromIndexInternal(System.Int32)">
      <summary>
            Implements the public interface <see cref="M:Rotorz.Extras.Collections.OrderedDictionaryAsset.GetValueFromIndex(System.Int32)" />.
            </summary>
      <param name="index">Zero-based index of entry in ordered dictionary.</param>
      <returns>
            The key.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
            If <paramref name="index" /> is out of range.
            </exception>
    </member>
    <member name="P:Rotorz.Extras.Collections.OrderedDictionaryAsset.KeysWithDuplicateValues">
      <summary>
            Gets the collection of keys that somehow have two or more associated values.
            </summary>
    </member>
    <member name="P:Rotorz.Extras.Collections.OrderedDictionaryAsset.KeyType">
      <summary>
            Gets the data type of a key.
            </summary>
    </member>
    <member name="P:Rotorz.Extras.Collections.OrderedDictionaryAsset.ValueType">
      <summary>
            Gets the data type of a value.
            </summary>
    </member>
    <member name="T:Rotorz.Extras.Collections.OrderedDictionaryAsset`2">
      <summary>
            Base class for a serializable ordered dictionary asset. Custom dictionary asset
            classes should inherit from this class since Unity is currently unable to
            serialize instances of generic types.
            </summary>
      <typeparam name="TKey">Type of key.</typeparam>
      <typeparam name="TValue">Type of value.</typeparam>
    </member>
    <member name="M:Rotorz.Extras.Collections.OrderedDictionaryAsset`2.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Rotorz.Extras.Collections.OrderedDictionaryAsset" /> class.
            </summary>
    </member>
    <member name="F:Rotorz.Extras.Collections.OrderedDictionaryAsset`2._dictionary"></member>
    <member name="F:Rotorz.Extras.Collections.OrderedDictionaryAsset`2._keys"></member>
    <member name="F:Rotorz.Extras.Collections.OrderedDictionaryAsset`2._keysWithDuplicateValues"></member>
    <member name="F:Rotorz.Extras.Collections.OrderedDictionaryAsset`2._values"></member>
    <member name="M:Rotorz.Extras.Collections.OrderedDictionaryAsset`2.Add(`0,`1)">
      <summary>Adds an element with the provided key and value to the <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <param name="key">The object to use as the key of the element to add.</param>
      <param name="value">The object to use as the value of the element to add.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
      <exception cref="T:System.ArgumentException">An element with the same key already exists in the <see cref="T:System.Collections.Generic.IDictionary`2" />.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2" /> is read-only.</exception>
    </member>
    <member name="M:Rotorz.Extras.Collections.OrderedDictionaryAsset`2.Clear">
      <summary>Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only. </exception>
    </member>
    <member name="M:Rotorz.Extras.Collections.OrderedDictionaryAsset`2.ContainsKey(System.Object)">
      <summary>
            Determines whether the dictionary contains the untyped key.
            </summary>
      <param name="key">Key to lookup.</param>
      <returns>
            A value of <c>true</c> if dictionary contains an entry with the specified key.
            Always returns a value of <c>false</c> if the specified key is not of the type
            <see cref="P:Rotorz.Extras.Collections.OrderedDictionaryAsset.KeyType" />.
            </returns>
      <exception cref="T:System.ArgumentNullException">
            If <paramref name="key" /> is <c>null</c>.
            </exception>
    </member>
    <member name="M:Rotorz.Extras.Collections.OrderedDictionaryAsset`2.ContainsKey(`0)">
      <summary>Determines whether the <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element with the specified key.</summary>
      <param name="key">The key to locate in the <see cref="T:System.Collections.Generic.IDictionary`2" />.</param>
      <returns>true if the <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element with the key; otherwise, false.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
    </member>
    <member name="P:Rotorz.Extras.Collections.OrderedDictionaryAsset`2.Count">
      <summary>
            Gets the total count of entries in the dictionary.
            </summary>
      <returns>The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
    </member>
    <member name="M:Rotorz.Extras.Collections.OrderedDictionaryAsset`2.GetEnumerator">
      <summary>
            Gets an object for enumerating over the ordered collection of keys and values.
            </summary>
      <returns>
            The new <see cref="T:Rotorz.Extras.Collections.OrderedDictionaryAsset`2.Enumerator" />.
            </returns>
    </member>
    <member name="M:Rotorz.Extras.Collections.OrderedDictionaryAsset`2.GetKeyFromIndex(System.Int32)">
      <summary>
            Gets the key of the entry at the specified index.
            </summary>
      <param name="index">Zero-based index of entry in ordered dictionary.</param>
      <returns>
            The key.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
            If <paramref name="index" /> is out of range.
            </exception>
    </member>
    <member name="M:Rotorz.Extras.Collections.OrderedDictionaryAsset`2.GetKeyFromIndexInternal(System.Int32)">
      <summary>
            Implements the public interface <see cref="M:Rotorz.Extras.Collections.OrderedDictionaryAsset.GetKeyFromIndex(System.Int32)" />.
            </summary>
      <param name="index">Zero-based index of entry in ordered dictionary.</param>
      <returns>
            The key.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
            If <paramref name="index" /> is out of range.
            </exception>
    </member>
    <member name="M:Rotorz.Extras.Collections.OrderedDictionaryAsset`2.GetValueFromIndex(System.Int32)">
      <summary>
            Gets the value of the entry at the specified index.
            </summary>
      <param name="index">Zero-based index of entry in ordered dictionary.</param>
      <returns>
            The key.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
            If <paramref name="index" /> is out of range.
            </exception>
    </member>
    <member name="M:Rotorz.Extras.Collections.OrderedDictionaryAsset`2.GetValueFromIndexInternal(System.Int32)">
      <summary>
            Implements the public interface <see cref="M:Rotorz.Extras.Collections.OrderedDictionaryAsset.GetValueFromIndex(System.Int32)" />.
            </summary>
      <param name="index">Zero-based index of entry in ordered dictionary.</param>
      <returns>
            The key.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
            If <paramref name="index" /> is out of range.
            </exception>
    </member>
    <member name="M:Rotorz.Extras.Collections.OrderedDictionaryAsset`2.IndexOf(`0)">
      <summary>
            Determines the index of an item with a aspecific key in the <see cref="T:Rotorz.Extras.Collections.OrderedDictionaryAsset`2" />.
            </summary>
      <param name="key">The key of the entry to locate in the <see cref="T:Rotorz.Extras.Collections.OrderedDictionaryAsset`2" />.</param>
      <returns>
            The zero-based index of the entry when found; otherwise, a value of <c>-1</c>.
            </returns>
    </member>
    <member name="M:Rotorz.Extras.Collections.OrderedDictionaryAsset`2.Insert(System.Int32,`0,`1)">
      <summary>
            Insert new entry into the ordered dictionary.
            </summary>
      <param name="index">Zero-based index at which to insert the new entry.</param>
      <param name="key">Unique key for the new entry.</param>
      <param name="value">Value for the new entry.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
            If <paramref name="index" /> is out of the range of the ordered dictionary.
            </exception>
      <exception cref="T:System.ArgumentNullException">
            If <paramref name="key" /> is <c>null</c>.
            </exception>
      <exception cref="T:System.ArgumentException">
            If dictionary already contains an entry with the specified key.
            </exception>
    </member>
    <member name="P:Rotorz.Extras.Collections.OrderedDictionaryAsset`2.Item(`0)">
      <summary>Gets or sets the element with the specified key.</summary>
      <param name="key">The key of the element to get or set.</param>
      <returns>The element with the specified key.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">The property is retrieved and <paramref name="key" /> is not found.</exception>
      <exception cref="T:System.NotSupportedException">The property is set and the <see cref="T:System.Collections.Generic.IDictionary`2" /> is read-only.</exception>
    </member>
    <member name="P:Rotorz.Extras.Collections.OrderedDictionaryAsset`2.Keys">
      <summary>
            Gets the read-only ordered collection of keys.
            </summary>
    </member>
    <member name="P:Rotorz.Extras.Collections.OrderedDictionaryAsset`2.KeysWithDuplicateValues">
      <summary>
            Gets the collection of keys that somehow have two or more associated values.
            </summary>
    </member>
    <member name="M:Rotorz.Extras.Collections.OrderedDictionaryAsset`2.OnAfterDeserialize"></member>
    <member name="M:Rotorz.Extras.Collections.OrderedDictionaryAsset`2.OnBeforeSerialize"></member>
    <member name="M:Rotorz.Extras.Collections.OrderedDictionaryAsset`2.Remove(`0)">
      <summary>Removes the element with the specified key from the <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <param name="key">The key of the element to remove.</param>
      <returns>true if the element is successfully removed; otherwise, false.  This method also returns false if <paramref name="key" /> was not found in the original <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2" /> is read-only.</exception>
    </member>
    <member name="M:Rotorz.Extras.Collections.OrderedDictionaryAsset`2.RemoveAt(System.Int32)">
      <summary>Removes the <see cref="T:System.Collections.Generic.IList`1" /> item at the specified index.</summary>
      <param name="index">The zero-based index of the item to remove.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1" />.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1" /> is read-only.</exception>
    </member>
    <member name="M:Rotorz.Extras.Collections.OrderedDictionaryAsset`2.TryGetValue(`0,`1@)">
      <summary>Gets the value associated with the specified key.</summary>
      <param name="key">The key whose value to get.</param>
      <param name="value">When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <paramref name="value" /> parameter. This parameter is passed uninitialized.</param>
      <returns>true if the object that implements <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element with the specified key; otherwise, false.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
    </member>
    <member name="P:Rotorz.Extras.Collections.OrderedDictionaryAsset`2.Values">
      <summary>
            Gets the read-only ordered collection of values.
            </summary>
    </member>
    <member name="T:Rotorz.Extras.Collections.OrderedDictionaryAsset`2.Enumerator">
      <summary>
            Enumerator for enumerating through the key/value pairs of an ordered dictionary.
            </summary>
    </member>
    <member name="M:Rotorz.Extras.Collections.OrderedDictionaryAsset`2.Enumerator.#ctor(Rotorz.Extras.Collections.OrderedDictionaryAsset{`0,`1},System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:Rotorz.Extras.Collections.OrderedDictionaryAsset`2.Enumerator" /> structure.
            </summary>
      <param name="dictionary">The associated dictionary.</param>
    </member>
    <member name="P:Rotorz.Extras.Collections.OrderedDictionaryAsset`2.Enumerator.Current">
      <summary>Gets the element in the collection at the current position of the enumerator.</summary>
      <returns>The element in the collection at the current position of the enumerator.</returns>
    </member>
    <member name="P:Rotorz.Extras.Collections.OrderedDictionaryAsset`2.Enumerator.Key">
      <summary>
            Gets the key of the current entry.
            </summary>
    </member>
    <member name="M:Rotorz.Extras.Collections.OrderedDictionaryAsset`2.Enumerator.MoveNext">
      <summary>Advances the enumerator to the next element of the collection.</summary>
      <returns>true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.</returns>
      <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
    </member>
    <member name="P:Rotorz.Extras.Collections.OrderedDictionaryAsset`2.Enumerator.Value">
      <summary>
            Gets the value of the current entry.
            </summary>
    </member>
    <member name="T:Rotorz.Extras.Collections.OrderedDictionaryAsset`2.KeyCollection">
      <summary>
            A read-only ordered collection of keys from the associated <see cref="T:Rotorz.Extras.Collections.OrderedDictionaryAsset`2" /> instance.
            </summary>
    </member>
    <member name="M:Rotorz.Extras.Collections.OrderedDictionaryAsset`2.KeyCollection.#ctor(Rotorz.Extras.Collections.OrderedDictionaryAsset{`0,`1})">
      <summary>
            Initializes a new instance of the <see cref="T:Rotorz.Extras.Collections.OrderedDictionaryAsset`2.KeyCollection" /> class.
            </summary>
      <param name="dictionary">The associated dictionary.</param>
    </member>
    <member name="M:Rotorz.Extras.Collections.OrderedDictionaryAsset`2.KeyCollection.Contains(`0)">
      <summary>Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.</summary>
      <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <returns>true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.</returns>
    </member>
    <member name="M:Rotorz.Extras.Collections.OrderedDictionaryAsset`2.KeyCollection.CopyTo(`0[],System.Int32)">
      <summary>Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
      <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> is less than 0.</exception>
      <exception cref="T:System.ArgumentException">The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1" /> is greater than the available space from <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.</exception>
    </member>
    <member name="P:Rotorz.Extras.Collections.OrderedDictionaryAsset`2.KeyCollection.Count">
      <summary>Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
      <returns>The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
    </member>
    <member name="M:Rotorz.Extras.Collections.OrderedDictionaryAsset`2.KeyCollection.GetEnumerator">
      <summary>
            Gets an object for enumerating over the ordered collection of keys.
            </summary>
      <returns>
            The new <see cref="T:Rotorz.Extras.Collections.OrderedDictionaryAsset`2.KeyCollection.Enumerator" />.
            </returns>
    </member>
    <member name="M:Rotorz.Extras.Collections.OrderedDictionaryAsset`2.KeyCollection.IndexOf(`0)">
      <summary>Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1" />.</summary>
      <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1" />.</param>
      <returns>The index of <paramref name="item" /> if found in the list; otherwise, -1.</returns>
    </member>
    <member name="P:Rotorz.Extras.Collections.OrderedDictionaryAsset`2.KeyCollection.Item(System.Int32)">
      <summary>
            Gets key of entry at a specific index in the ordered dictionary.
            </summary>
      <param name="index">Zero-based index of entry.</param>
      <returns>
            The <see cref="!:TKey" />.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
            If <paramref name="index" /> is out of range of the collection.
            </exception>
    </member>
    <member name="T:Rotorz.Extras.Collections.OrderedDictionaryAsset`2.KeyCollection.Enumerator">
      <summary>
            Enumerator for enumerating through the keys of an ordered dictionary.
            </summary>
    </member>
    <member name="M:Rotorz.Extras.Collections.OrderedDictionaryAsset`2.KeyCollection.Enumerator.#ctor(Rotorz.Extras.Collections.OrderedDictionaryAsset{`0,`1})">
      <summary>
            Initializes a new instance of the <see cref="T:Rotorz.Extras.Collections.OrderedDictionaryAsset`2.KeyCollection.Enumerator" /> structure.
            </summary>
      <param name="dictionary">The associated dictionary.</param>
    </member>
    <member name="P:Rotorz.Extras.Collections.OrderedDictionaryAsset`2.KeyCollection.Enumerator.Current">
      <summary>Gets the element in the collection at the current position of the enumerator.</summary>
      <returns>The element in the collection at the current position of the enumerator.</returns>
    </member>
    <member name="M:Rotorz.Extras.Collections.OrderedDictionaryAsset`2.KeyCollection.Enumerator.MoveNext">
      <summary>Advances the enumerator to the next element of the collection.</summary>
      <returns>true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.</returns>
      <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
    </member>
    <member name="M:Rotorz.Extras.Collections.OrderedDictionaryAsset`2.KeyCollection.Enumerator.Reset">
      <summary>Sets the enumerator to its initial position, which is before the first element in the collection.</summary>
      <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
    </member>
    <member name="T:Rotorz.Extras.Collections.OrderedDictionaryAsset`2.ValueCollection">
      <summary>
            A read-only ordered collection of values from the associated <see cref="T:Rotorz.Extras.Collections.OrderedDictionaryAsset`2" /> instance.
            </summary>
    </member>
    <member name="M:Rotorz.Extras.Collections.OrderedDictionaryAsset`2.ValueCollection.#ctor(Rotorz.Extras.Collections.OrderedDictionaryAsset{`0,`1})">
      <summary>
            Initializes a new instance of the <see cref="T:Rotorz.Extras.Collections.OrderedDictionaryAsset`2.ValueCollection" /> class.
            </summary>
      <param name="dictionary">The associated dictionary.</param>
    </member>
    <member name="M:Rotorz.Extras.Collections.OrderedDictionaryAsset`2.ValueCollection.Contains(`1)">
      <summary>Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.</summary>
      <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <returns>true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.</returns>
    </member>
    <member name="M:Rotorz.Extras.Collections.OrderedDictionaryAsset`2.ValueCollection.CopyTo(`1[],System.Int32)">
      <summary>Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
      <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> is less than 0.</exception>
      <exception cref="T:System.ArgumentException">The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1" /> is greater than the available space from <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.</exception>
    </member>
    <member name="P:Rotorz.Extras.Collections.OrderedDictionaryAsset`2.ValueCollection.Count">
      <summary>Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
      <returns>The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
    </member>
    <member name="M:Rotorz.Extras.Collections.OrderedDictionaryAsset`2.ValueCollection.GetEnumerator">
      <summary>
            Gets an object for enumerating over the ordered collection of values.
            </summary>
      <returns>
            The new <see cref="T:Rotorz.Extras.Collections.OrderedDictionaryAsset`2.ValueCollection.Enumerator" />.
            </returns>
    </member>
    <member name="M:Rotorz.Extras.Collections.OrderedDictionaryAsset`2.ValueCollection.IndexOf(`1)">
      <summary>Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1" />.</summary>
      <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1" />.</param>
      <returns>The index of <paramref name="item" /> if found in the list; otherwise, -1.</returns>
    </member>
    <member name="P:Rotorz.Extras.Collections.OrderedDictionaryAsset`2.ValueCollection.Item(System.Int32)">
      <summary>
            Gets value of entry at a specific index in the ordered dictionary.
            </summary>
      <param name="index">Zero-based index of entry.</param>
      <returns>
            The <see cref="!:TValue" />.
            </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
            If <paramref name="index" /> is out of range of the collection.
            </exception>
    </member>
    <member name="T:Rotorz.Extras.Collections.OrderedDictionaryAsset`2.ValueCollection.Enumerator">
      <summary>
            Enumerator for enumerating through the values of an ordered dictionary.
            </summary>
    </member>
    <member name="M:Rotorz.Extras.Collections.OrderedDictionaryAsset`2.ValueCollection.Enumerator.#ctor(Rotorz.Extras.Collections.OrderedDictionaryAsset{`0,`1})">
      <summary>
            Initializes a new instance of the <see cref="T:Rotorz.Extras.Collections.OrderedDictionaryAsset`2.KeyCollection.Enumerator" /> structure.
            </summary>
      <param name="dictionary">The associated dictionary.</param>
    </member>
    <member name="P:Rotorz.Extras.Collections.OrderedDictionaryAsset`2.ValueCollection.Enumerator.Current">
      <summary>Gets the element in the collection at the current position of the enumerator.</summary>
      <returns>The element in the collection at the current position of the enumerator.</returns>
    </member>
    <member name="M:Rotorz.Extras.Collections.OrderedDictionaryAsset`2.ValueCollection.Enumerator.MoveNext">
      <summary>Advances the enumerator to the next element of the collection.</summary>
      <returns>true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.</returns>
      <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
    </member>
    <member name="M:Rotorz.Extras.Collections.OrderedDictionaryAsset`2.ValueCollection.Enumerator.Reset">
      <summary>Sets the enumerator to its initial position, which is before the first element in the collection.</summary>
      <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
    </member>
  </members>
</doc>